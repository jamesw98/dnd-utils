@using Compendium.Models
@using Compendium.Enums
@using Compendium.Services
@using Compendium.Exceptions

@inject AttackService AttackService
@inject ISnackbar Snackbar

<MudPaper Class="pa-8">
    <MudForm>
        <div class="d-flex">
            @if (CombatManagerLayout)
            {
                <MudTextField T="string" Label="Attack Name" Required="true" RequiredError="Attack Name is required!" @ref="_attackName"/>
                <MudSpacer/>
                <MudSelect @bind-SelectedValues="_creaturesToHit" MultiSelection="true" T="Monster" Label="Targeted Creatures" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var c in Creatures)
                    {
                        <MudSelectItem T="Monster" Value="@c"/>
                    }
                </MudSelect>
            }
        </div>
        <div class="d-flex">
            <MudTextField T="int" Label="Number of Attacks" Required="true" RequiredError="Number of attacks is required!" @ref="_attackNum"/>
            <MudSpacer/>
            <MudTextField T="int" Label="To Hit Mod" Required="true" RequiredError="Hit die mod is required!" @ref="_toHitMod" Disabled="SavingThrow"/>
            <MudSpacer/>    
            @if (!CombatManagerLayout)
            {
                <MudTextField T="int" Label="AC To Beat" Required="true" RequiredError="AC to beat is required!" @ref="_ac"/>
            }
        </div>
        <br/>
        <div class="d-flex">
            <MudTextField T="int" Label="Number of Damage Dice" Required="true" RequiredError="Number of attacks is required!" @ref="_damageNum" Disabled="_useFixedDamage"/>
            <MudSpacer/>
            <MudTextField T="int" Label="Damage Die" Required="true" RequiredError="Hit die mod is required!" @ref="_damageDie" Disabled="_useFixedDamage"/>
            <MudSpacer/>
            <MudTextField T="int" Label="Damage Mod" Required="true" RequiredError="Hit die mod is required!" @ref="_damageMod" Disabled="_useFixedDamage"/>
        </div>
        <br/>
        <div class="d-flex">
            <MudSelect @bind-Value="_damageType" T="DamageType" Label="Damage Type" AnchorOrigin="Origin.BottomCenter" Placeholder="@DamageType.Acid.ToString()">
                @foreach (var dt in _damageTypes)
                {
                    <MudSelectItem T="DamageType" Value="@dt"/>
                }
            </MudSelect>
        </div>
    </MudForm>
</MudPaper>
<MudPaper Class="pa-4 mt-4">
    <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Refresh" OnClick="CalcAttacks">Roll!</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="ClearAttacks">Clear History</MudButton>
</MudPaper>
<br/>
<MudText Typo="Typo.h4">Optional</MudText>
<MudPaper Class="pa-4 mt-4">
    @if (!CombatManagerLayout)
    {
        <MudCheckBox T="bool"  @bind-Checked="@_hideMisses" Label="Hide Misses" Color="Color.Primary"></MudCheckBox>
    }
    else
    {
        <MudCheckBox T="bool" @oninput="InvokeSavingThrow" Label="Saving Throw" Color="Color.Primary"></MudCheckBox>    
    }
    <MudCheckBox T="bool"  @bind-Checked="@_useFixedDamage" Label="Fixed Damage" Color="Color.Primary"></MudCheckBox>
    @if (_useFixedDamage)
    {
        <MudTextField T="int" Label="Fixed Damage" @ref="_fixedDamage"/>
    }
    <MudCheckBox T="bool"  @bind-Checked="@_autoCrit" Label="Auto-Crit" Color="Color.Primary"></MudCheckBox>
    <MudCheckBox T="bool"  @bind-Checked="@_advantage" Label="Advantage" Color="Color.Primary"></MudCheckBox>
    <MudCheckBox T="bool"  @bind-Checked="@_disadvantage" Label="Disadvantage" Color="Color.Primary"></MudCheckBox>

</MudPaper>

@code {

    [Parameter]
    public List<AttackResult> Attacks { get; set; }

    [Parameter]
    public EventCallback<List<AttackResult>> AttacksChanged { get; set; }

    [Parameter]
    public List<Monster> Creatures { get; set; }

    [Parameter]
    public EventCallback<List<Monster>> CreaturesChanged { get; set; }
    
    [Parameter]
    public bool SavingThrow { get; set; } = false;

    [Parameter]
    public EventCallback<bool> SavingThrowChanged { get; set; }
    
    [Parameter]
    public bool CombatManagerLayout { get; set; }

    private IEnumerable<Monster> _creaturesToHit = new HashSet<Monster>();

    private List<DamageType> _damageTypes = Enum.GetValues<DamageType>().ToList();
    private DamageType _damageType;

    private bool _hideMisses = false;
    private bool _advantage = false;
    private bool _disadvantage = false;
    private bool _autoCrit = false;
    private bool _useFixedDamage = false;

    private MudTextField<int> _attackNum;
    private MudTextField<int> _toHitMod;
    private MudTextField<int> _ac;

    private MudTextField<int> _damageNum;
    private MudTextField<int> _damageDie;
    private MudTextField<int> _damageMod;
    
    private MudTextField<int> _fixedDamage;

    private MudTextField<string>? _attackName;

    private async Task InvokeAttacks()
    {
        await AttacksChanged.InvokeAsync(Attacks);
    }

    private async Task InvokeCreatures()
    {
        await CreaturesChanged.InvokeAsync(Creatures);
    }

    private async Task ClearAttacks()
    {
        Attacks = Enumerable.Empty<AttackResult>().ToList();
        await InvokeAttacks();
    }

    private async Task InvokeSavingThrow()
    {
        await SavingThrowChanged.InvokeAsync(!SavingThrow);
    }

    private async Task CalcAttacks()
    {
        try
        {
            var attacks = AttackService.CalculateAttackResults(
                _attackName?.Value ?? "",
                _attackNum.Value,
                _toHitMod.Value,
                CombatManagerLayout ? 0 : _ac.Value,
                _damageNum.Value,
                _damageDie.Value,
                _damageMod.Value,
                _damageType,
                _hideMisses,
                _advantage,
                _disadvantage,
                _autoCrit,
                _useFixedDamage ? _fixedDamage.Value : -1);

            Attacks.AddRange(attacks);
            await InvokeAttacks();

            if (CombatManagerLayout)
            {
                var tempCreatures = AttackService.DealDamage(Creatures, _creaturesToHit, Attacks, SavingThrow);
                var deadCreatures = tempCreatures.Where(x => x.HitPoints == 0).ToList();
                
                tempCreatures.RemoveAll(x => x.HitPoints == 0);
                tempCreatures.AddRange(deadCreatures);
                
                Creatures = tempCreatures; 
                await InvokeCreatures();
            }
        }
        catch (IllegalStateException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

}