@page "/attack"
@using dnd_utils.Services
@using dnd_utils.Models
@using dnd_utils.Exceptions

@inject ISnackbar Snackbar
@inject AttackService AttackService

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h2">
        D&D Attack Calculator
    </MudText>
    <MudDivider/>
    <MudText Typo="Typo.body1">
        Ever needed to roll a bunch of attacks against a player's (or creature's) AC? Well, now you can!
    </MudText>
    <MudText Typo="Typo.body1">
        Just fill out the fields below, check any of the options, and click "Roll!".
    </MudText>
    <MudText Typo="Typo.body1">
        If you want to see details about a roll, click the info icon on the far right of the column.
    </MudText>
</MudContainer>
<br/>
<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <AttackInputs Size="7" @bind-Attacks="_attacks"/>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudTable Items="_attacks" Breakpoint="Breakpoint.Md">
                    <HeaderContent>
                        <MudTh>Attack Roll</MudTh>
                        <MudTh>Hit?</MudTh>
                        <MudTh>Damage Roll</MudTh>
                        <MudTh>Crit?</MudTh>
                        <MudTh>Info</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.AttackDetail.Total</MudTd>
                        <MudTd>@(context.Hit ? "Hit" : "Miss")</MudTd>
                        <MudTd>@context.Damange</MudTd>
                        <MudTd>@(context.Crit ? "Yes" : "No")</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Outlined.Info" aria-label="info" OnClick="async () => { await OnButtonClicked(context); }"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudTextField<int> _attackNum;
    private MudTextField<int> _toHitMod;
    private MudTextField<int> _ac;
    private MudTextField<int> _damageNum;
    private MudTextField<int> _damageDie;
    private MudTextField<int> _damageMod;

    private bool _hideMisses;
    private bool _advantage;
    private bool _disadvantage;
    private bool _autoCrit;

    private List<AttackResult> _attacks = new();

    [Inject]
    private IDialogService DialogService { get; set; }

    private async Task OnButtonClicked(AttackResult ar)
    {
        var message = "";
        if (ar.UnusedAttackDetail != null)
            message = $"<b>To hit:</b> <br /> <u>{ar.AttackDetail}</u> <br />{ar.UnusedAttackDetail}<br /><br /> <b>Damage:</b> <br /> {ar.DamageDetail}";
        else
            message = $"<b>To hit:</b> <br /> {ar.AttackDetail} <br /><br /> <b>Damage:</b> <br /> {ar.DamageDetail}";

        await DialogService.ShowMessageBox("Attack Result Info", (MarkupString)message);

        StateHasChanged();
    }

    private void CalcAttacks()
    {
        ClearAttacks();

        try
        {
            var attacks = AttackService.CalculateAttackResults(
                _attackNum.Value,
                _toHitMod.Value,
                _ac.Value,
                _damageNum.Value,
                _damageDie.Value,
                _damageMod.Value,
                _hideMisses,
                _advantage,
                _disadvantage,
                _autoCrit);

            _attacks.AddRange(attacks);
        }
        catch (IllegalStateException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private void ClearAttacks()
    {
        _attacks.Clear();
    }
}