@page "/attack"
@using dnd_utils.Services
@using dnd_utils.Models

@inject DiceService DiceService

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h2">
        D&D Attack Calculator
    </MudText>
</MudContainer>
<br/>
<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-8">
                <MudForm>
                    <div class="d-flex">
                        <MudTextField T="int" Label="Number of Attacks" Required="true" RequiredError="Number of attacks is required!" @ref="_attackNum"/>
                        <MudSpacer/>
                        <MudTextField T="int" Label="To Hit Mod" Required="true" RequiredError="Hit die mod is required!" @ref="_toHidMod"/>
                        <MudSpacer/>
                        <MudTextField T="int" Label="AC To Beat" Required="true" RequiredError="Hit die mod is required!" @ref="_ac"/>
                    </div>
                    <br/>
                    <div class="d-flex">
                        <MudTextField T="int" Label="Number of Damage Dice" Required="true" RequiredError="Number of attacks is required!" @ref="_damageNum"/>
                        <MudSpacer/>
                        <MudTextField T="int" Label="Damage Die" Required="true" RequiredError="Hit die mod is required!" @ref="_damageDie"/>
                        <MudSpacer/>
                        <MudTextField T="int" Label="Damage Mod" Required="true" RequiredError="Hit die mod is required!" @ref="_damageMod"/>
                    </div>
                </MudForm>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Refresh" OnClick="CalcAttacks">Roll!</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Error" OnClick="ClearAttacks">Clear</MudButton>
                <MudCheckBox @bind-Checked="@_hideMisses" Label="Hide Misses" Color="Color.Primary"></MudCheckBox>
                <MudCheckBox @bind-Checked="@_advantage" Label="Advantage" Color="Color.Primary"></MudCheckBox>
                <MudCheckBox @bind-Checked="@_disadvantage" Label="Disadvantage" Color="Color.Primary"></MudCheckBox>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudTable Items="_attacks" Breakpoint="Breakpoint.Md">
                    <HeaderContent>
                        <MudTh>Attack Roll</MudTh>
                        <MudTh>Hit?</MudTh>
                        <MudTh>Damage Roll</MudTh>
                        <MudTh>Crit?</MudTh>
                        @* <MudTh>Info</MudTh> *@
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.AttackDetail.Total</MudTd>
                        <MudTd>@(context.Hit ? "Hit" : "Miss")</MudTd>
                        <MudTd>@context.Damange</MudTd>
                        <MudTd>@(context.Crit ? "Yes" : "No")</MudTd>
                        @* <MudTd> *@
                        @*     <MudIconButton Icon="@Icons.Material.Outlined.Info" aria-label="info"></MudIconButton> *@
                        @* </MudTd> *@
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudTextField<int> _attackNum;
    private MudTextField<int> _toHidMod;
    private MudTextField<int> _ac;
    private MudTextField<int> _damageNum;
    private MudTextField<int> _damageDie;
    private MudTextField<int> _damageMod;

    private bool _hideMisses;
    private bool _advantage;
    private bool _disadvantage;

    private List<AttackResult> _attacks = new();

    private void CalcAttacks()
    {
        ClearAttacks();

        for (var i = 0; i < _attackNum.Value; i++)
        {
            var currentAttack = new AttackResult
            {
                AcToBeat = _ac.Value
            };

            RollDetails? toHit;
            if (_advantage)
                toHit = DiceService.RollDetailedAdvantage(1, 20, _toHidMod.Value);
            else if (_disadvantage)
                toHit = DiceService.RollDetailedDisadvantage(1, 20, _toHidMod.Value);
            else
                toHit = DiceService.RollDetailed(1, 20, _toHidMod.Value);

            if (toHit == null)
                throw new Exception("Illegal state");

            currentAttack.AttackDetail = toHit;

            if (toHit.Total >= _ac.Value)
                currentAttack.Hit = true;

            if (toHit.Rolls.Contains(20))
                currentAttack.Crit = true;

            var diceNum = currentAttack.Crit ? _damageNum.Value * 2 : _damageNum.Value;

            var damage = DiceService.RollDetailed(diceNum, _damageDie.Value, _damageMod.Value);

            currentAttack.DamageDetail = damage;
            currentAttack.Damange = damage.Total;
            _attacks.Add(currentAttack);
        }

        _attacks = _attacks.OrderByDescending(x => x.AttackDetail.Total).ToList();
        if (_hideMisses)
            _attacks = _attacks.Where(x => x.Hit).ToList();
    }

    private void ClearAttacks()
    {
        _attacks.Clear();
    }

}