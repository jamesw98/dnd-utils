@page "/spellbook"
@using dnd_utils.Services
@using dnd_utils.Models

@inject SearchService SearchService

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h2">
        D&D Spell Book Builder
    </MudText>
</MudContainer>

@if (_classes != null)
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-4">
                <div class="d-flex">
                    <MudTextField @bind-Value="_characterName" Label="Character Name" Variant="Variant.Text"/>
                    <MudSpacer/>
                    <MudSelect T="string" @bind-Value="_className" SelectedValuesChanged="async () => { await GetSpellSlots(); }" Label="Class" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var name in _classes)
                        {
                            <MudSelectItem T="string" Value="@name"/>
                        }
                    </MudSelect>
                    <MudSpacer/>
                    <MudNumericField @bind-Value="_characterLevel" TextChanged="async (x) => { await LevelChanged(x); }" Label="Character Level" Variant="Variant.Text" Min="1" Max="20"/>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save">Save Spellbook</MudButton>
                </div>
            </MudPaper>
        </MudItem>
    </MudContainer>
}
@if (_className != null && _spellSlots != null)
{
    <br/>
    <LimitedSpellSearchBar MaxLevel="@_characterLevel" ClassName="@_className"/>
    <br/>
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudItem xs="12" sm="12">
            <MudText Typo="Typo.h4">
                
            </MudText>
            <MudPaper Class="pa-4">
                <MudExpansionPanels>
                    @foreach (var key in _spellSlots.Keys)
                    {
                        var title = $"Level {key}";
                        <MudExpansionPanel Text="@title">
                            <MudTable Items="@_book.SpellsForLevel[key]">
                            </MudTable>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>
    </MudContainer>
}

@code {

    private List<string>? _classes;
    private string? _characterName;
    private string? _className;
    private int _characterLevel = 1;
    private Dictionary<int, int>? _spellSlots;
    private Spellbook _book = new();

    private async Task GetSpellSlots()
    {
        if (_className != null)
        {
            var allSlots = await SearchService.GetSpellSlotsForClass(_className);
            _spellSlots = allSlots[_characterLevel];    
        }
    }

    private async Task LevelChanged(string levelText)
    {
        if (int.TryParse(levelText, out var parsedInt))
            _characterLevel = parsedInt;

        await GetSpellSlots();
    }

    protected override async Task OnInitializedAsync()
    {
        _classes = await SearchService.GetClassList();
    }

}