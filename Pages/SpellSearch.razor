@page "/spells"
@using dnd_utils.Models
@using System.Text.RegularExpressions
@using System.Web

@inject HttpClient Client

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h2">
        D&D Spell Search
    </MudText>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudItem xs="12" sm="12">
        <MudPaper Class="pa-4">
            <div class="d-flex">
                <MudAutocomplete T="string" Label="Spells" @bind-Value="_spellName" SearchFunc="@Search" MaxItems="null"/>
                <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" Edge="Edge.Start" OnClick="GetSpell"/>
            </div>
        </MudPaper>
    </MudItem>
    @if (_spell != null)
    {
        <br/>
        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h3">
                    @_spell.Name
                </MudText>
                <MudDivider/>
                <br/>
                @((MarkupString)Regex.Replace(HttpUtility.HtmlEncode(_spell.PageContent), "\r?\n|\r", "<br /><br />"))
            </MudPaper>
        </MudItem>
    }
</MudContainer>

@code {
    private string? _spellName;
    private List<string> _spells = new();
    private Spell? _spell = null;

    private async Task<IEnumerable<string>> Search(string query)
    {
        if (string.IsNullOrEmpty(query))
            return Array.Empty<string>();

        var spells = _spells
            .Where(x => x.Contains(query, StringComparison.InvariantCultureIgnoreCase));

        return spells;
    }

    private async Task GetSpell()
    {
        if (_spellName == null)
            return;

        var fixedSpellName = _spellName.ToLower().Replace(' ', '-').Replace('/', '-');

        var spell = await Client.GetFromJsonAsync<Spell>($"spells/{fixedSpellName}.json");

        if (spell == null)
            return;

        _spell = spell;
    }

    protected override async Task OnInitializedAsync()
    {
        var tempSpells = await Client.GetFromJsonAsync<List<string>>("spells/spell-list.json");

        if (tempSpells != null)
            _spells = tempSpells;
    }

}
