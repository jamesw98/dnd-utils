@using dnd_utils.Models
@using dnd_utils.Services
@using dnd_utils.Exceptions

@inject AttackService AttackService
@inject ISnackbar Snackbar

<MudPaper Class="pa-8">
    <MudForm>
        <div class="d-flex">
            <MudTextField T="int" Label="Number of Attacks" Required="true" RequiredError="Number of attacks is required!" @ref="_attackNum"/>
            <MudSpacer/>
            <MudTextField T="int" Label="To Hit Mod" Required="true" RequiredError="Hit die mod is required!" @ref="_toHitMod"/>
            <MudSpacer/>
            <MudTextField T="int" Label="AC To Beat" Required="true" RequiredError="Hit die mod is required!" @ref="_ac"/>
        </div>
        <br/>
        <div class="d-flex">
            <MudTextField T="int" Label="Number of Damage Dice" Required="true" RequiredError="Number of attacks is required!" @ref="_damageNum"/>
            <MudSpacer/>
            <MudTextField T="int" Label="Damage Die" Required="true" RequiredError="Hit die mod is required!" @ref="_damageDie"/>
            <MudSpacer/>
            <MudTextField T="int" Label="Damage Mod" Required="true" RequiredError="Hit die mod is required!" @ref="_damageMod"/>
        </div>
    </MudForm>
</MudPaper>
<MudPaper Class="pa-4 mt-4">
    <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Refresh" OnClick="CalcAttacks">Roll!</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="ClearAttacks">Clear</MudButton>
</MudPaper>
<br/>
<MudText Typo="Typo.h4">Optional</MudText>
<MudPaper Class="pa-4 mt-4">
    <MudCheckBox @bind-Checked="@_hideMisses" Label="Hide Misses" Color="Color.Primary"></MudCheckBox>
    <MudCheckBox @bind-Checked="@_advantage" Label="Advantage" Color="Color.Primary"></MudCheckBox>
    <MudCheckBox @bind-Checked="@_disadvantage" Label="Disadvantage" Color="Color.Primary"></MudCheckBox>
    <MudCheckBox @bind-Checked="@_autoCrit" Label="Auto-Crit" Color="Color.Primary"></MudCheckBox>
</MudPaper>

@code {

    private bool _hideMisses = false;
    private bool _advantage = false;
    private bool _disadvantage = false;
    private bool _autoCrit = false;

    private MudTextField<int> _attackNum;
    private MudTextField<int> _toHitMod;
    private MudTextField<int> _ac;

    private MudTextField<int> _damageNum;
    private MudTextField<int> _damageDie;
    private MudTextField<int> _damageMod;

    [Parameter]
    public List<AttackResult> Attacks { get; set; }

    [Parameter]
    public EventCallback<List<AttackResult>> AttacksChanged { get; set; }

    private async Task Invoke()
    {
        await AttacksChanged.InvokeAsync(Attacks);
    }

    private async Task ClearAttacks()
    {
        Attacks = Enumerable.Empty<AttackResult>().ToList();
        await Invoke();
    }

    private async Task CalcAttacks()
    {
        await ClearAttacks();

        try
        {
            var attacks = AttackService.CalculateAttackResults(
                _attackNum.Value,
                _toHitMod.Value,
                _ac.Value,
                _damageNum.Value,
                _damageDie.Value,
                _damageMod.Value,
                _hideMisses,
                _advantage,
                _disadvantage,
                _autoCrit);

            Attacks.AddRange(attacks);
            await Invoke();
        }
        catch (IllegalStateException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

}