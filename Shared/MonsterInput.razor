@using dnd_utils.Models
@using dnd_utils.Services

@inject ISnackbar Snackbar
@inject MonsterService MonsterService 

<MudPaper Class="pa-4">
    <MudForm>
        <div class="d-flex">
            <MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!" @ref="_name"/>
            <MudSpacer/>
            <MudTextField T="int" Label="Number" Required="true" RequiredError="Number is required!" @ref="_number"/>
        </div>
        <br/>
        <div class="d-flex">
            <MudTextField T="int" Label="Init Mod" Required="true" RequiredError="Initiative mod is required!" @ref="_initMod"/>
            <MudSpacer/>
            <MudTextField T="int" Label="AC" Required="true" RequiredError="Armor class is required!" @ref="_ac"/>
            <MudSpacer/>
            <MudTextField T="int" Label="Passive" Required="true" RequiredError="Passive perception is required!" @ref="_passive"/>
        </div>
        <br/>
        <div class="d-flex">
            <MudTextField T="int" Label="Hit Die Num" Required="true" RequiredError="Number of hit die is required!" @ref="_hitDieNum" Disabled="_useFixedHp"/>
            <MudSpacer/>
            <MudTextField T="int" Label="Hit Die Type" Required="true" RequiredError="Hit die type is required!" @ref="_hitDieType" Disabled="_useFixedHp"/>
            <MudSpacer/>
            <MudTextField T="int" Label="Hit Die Mod" Required="true" RequiredError="Hit die mod is required!" @ref="_hitDieMod" Disabled="_useFixedHp"/>
        </div>
    </MudForm>
</MudPaper>
<MudPaper Class="pa-4 mt-4">
    <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Draw" OnClick="GetMonsters">Generate!</MudButton>
    <MudTooltip Text="Coming soon!">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Disabled="true">Download CSV</MudButton>
    </MudTooltip>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Error" OnClick="ClearMonsters">Clear</MudButton>
</MudPaper>
<br/>
<MudText Typo="Typo.h4">Optional</MudText>
<MudPaper Class="pa-4 mt-4">
    <MudCheckBox @bind-Checked="@_useFixedHp" Label="Use Fixed Health" Color="Color.Primary"/>
    @if (_useFixedHp)
    {
        <MudTextField T="int" Label="Fixed HP" @ref="_fixedHp"/>    
    }
</MudPaper>

@code {

    [Parameter]
    public List<Monster> Monsters { get; set; }

    [Parameter]
    public EventCallback<List<Monster>> MonstersChanged { get; set; }

    private MudTextField<string> _name;
    private MudTextField<int> _number;
    private MudTextField<int> _initMod;
    private MudTextField<int> _ac;
    private MudTextField<int> _passive;
    private MudTextField<int> _hitDieNum;
    private MudTextField<int> _hitDieType;
    private MudTextField<int> _hitDieMod;
    private MudTextField<int> _fixedHp;

    private bool _useFixedHp = false;

    private async Task Invoke()
    {
        await MonstersChanged.InvokeAsync(Monsters);
    }

    private async Task GetMonsters()
    {
        if (!ValidateInput())
        {
            Snackbar.Add("Name cannot be empty!", Severity.Error);
            return;
        }

        if (_useFixedHp)
        {
            Monsters.AddRange(MonsterService.GenerateMonsters(_name.Value, _number.Value, _passive.Value, _initMod.Value,
                _ac.Value, _hitDieType.Value, _hitDieNum.Value, _hitDieMod.Value, _fixedHp.Value));
        }
        else
        {
            Monsters.AddRange(MonsterService.GenerateMonsters(_name.Value, _number.Value, _passive.Value, _initMod.Value,
                _ac.Value, _hitDieType.Value, _hitDieNum.Value, _hitDieMod.Value));
        }

        Monsters = Monsters.OrderByDescending(x => x.Initiative).ToList();
        await Invoke();
    }

    private async Task ClearMonsters()
    {
        Monsters.Clear();
        await Invoke();
    }

    private bool ValidateInput()
    {
        return _name.Value != null;
    }

}